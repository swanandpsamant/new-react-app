{"version":3,"sources":["serviceWorker.js","components/header.js","components/news_list_item.js","components/news_list.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","react_default","a","createElement","className","onClick","console","log","type","Component","NewsItem","_ref","item","title","feed","NewsList","props","items","news","map","news_list_item","key","id","children","App","state","JSON","this","header","news_list","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oECCSC,mLAbP,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAKC,QAAQC,IAAI,mBAAhD,QACAN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,iBANPC,aCYLC,EAXE,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACf,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAKS,EAAKC,OACVZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIS,EAAKE,SCeXC,EArBE,SAACC,GAEd,IAAMC,EAAQD,EAAME,KAAKC,IAAI,SAACP,GAC1B,OACGX,EAAAC,EAAAC,cAACiB,EAAD,CAAUC,IAAKT,EAAKU,GAAIV,KAAMA,MASrC,OACIX,EAAAC,EAAAC,cAAA,WACKa,EAAMO,SACNN,ICLPO,6MAEFC,MAAQ,CACJP,KAAKQ,2EAIL,OADApB,QAAQC,IAAIoB,KAAKF,MAAMP,MAEnBjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAWX,KAAMS,KAAKF,MAAMP,MAC5BjB,EAAAC,EAAAC,cAAA,oCAXEM,aAuBlBqB,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SJ4F3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00d0ac1c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport '../css/styles.css'\r\n\r\nclass Header extends Component {\r\n    render(){\r\n\r\n        return (\r\n            <header>\r\n                <div className=\"logo\" onClick={()=> console.log('I was Clicked')}>logo</div>\r\n                <input type=\"text\" />\r\n            </header>\r\n        )\r\n    }\r\n}\r\n    \r\n\r\n\r\n\r\n \r\nexport default Header; ","import React from 'react';\r\nimport '../css/styles.css';\r\n\r\n\r\n const NewsItem = ({item}) => {\r\n     return (\r\n         <div className=\"news_item\">\r\n             <h3>{item.title}</h3>\r\n             <div>\r\n                 <p>{item.feed}</p>\r\n             </div>\r\n         </div>\r\n     )\r\n }\r\n\r\n export default NewsItem;","import React from 'react';\r\nimport NewsItem from './news_list_item';\r\n\r\nconst NewsList = (props) => {\r\n    \r\n    const items = props.news.map((item)=> {\r\n        return(\r\n           <NewsItem key={item.id} item={item}/>\r\n        )\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {props.children}\r\n            {items}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewsList;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport JSON from './db.json';\nimport * as serviceWorker from './serviceWorker';\n\n// Components\nimport Header from './components/header';\nimport NewsList from './components/news_list';\n\n\n\n\n\n\nclass App extends Component {\n\n    state = {\n        news:JSON\n    }\n    render(){\n        console.log(this.state.news);\n        return (\n            <div>\n                <Header />\n                <NewsList  news={this.state.news}>\n                <h3>\n                The news are:\n                </h3>\n                </NewsList>\n            </div>\n        )\n    }\n}\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}